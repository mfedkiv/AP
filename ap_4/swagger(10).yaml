openapi: 3.0.1
info:
  title: 'Лабораторна робота варіант 10'
  description: 'Створити сервіс для календаря подій. Користувач має можливість створювати подію, редагувати її, видаляти, долучати інших користувачів до події, переглядати перелік всіх створених події, та подій до яких він долучений..'
  version: 1.0.0
servers:
- url: http://127.0.0.0:5000/api/v1
tags:
  - name: event
    description: operations with events
  - name: user
    description: operations with users
  - name: auth
    description: login/logout operations
  - name: calendar
    description: operations with calendars  
paths:
  /auth/login:
    post:
      tags:
      - auth
      summary: Logs in user with provided credentials
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The user's password (plain text)
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successful operation. JWT Token is returned" 
          content:
            application/json:
              schema:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        401:
          $ref: '#/components/responses/InvalidCredentialsError'
  
  /auth/logout:
    post:
      tags:
      - auth
      summary: Logs current user out of session
      operationId: logoutUser
      responses:
        200:
          description: "successful operation"
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
  
  /user:
    post:
      tags:
      - user
      summary: Register new user
      operationId: registerUser
      requestBody:
        description: User with data to be registered
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: "successful operation. User is registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "User with such username already exists"
  
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by id
      description: Get information about user with provided ID
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        description: 'The user id that needs to be fetched.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
        404:
          description: A user with provided ID was not found.
      security:
      - bearerAuth: []
    put:
      tags:
      - user
      summary: Update your account
      description: Updating is only applicable to owner's account
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        description: 'The user id that needs to be updated.'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'Updated user object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User is not found.
      security:
      - bearerAuth: []
  
  /calendars:
    get:
      tags:
      - calendar
      summary: Get all calendars
      description: Getting of all existsng calendars
      operationId: getCalendars
      responses:
        200:
          description: "successful operation. Return list of all calendars"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
      security:
      - bearerAuth: []
    post:
      tags:
      - calendar
      summary: Create new calendar
      description: Creating a new calendar
      operationId: createCalendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar'
      responses:
        200:
          description: "successful operation. Calendar is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
        401:
          $ref: '#/components/responses/UnauthorizedError'     
      security:
      - bearerAuth: []
      
      
  /calendars/{calendarId}:
    put:
      tags:
      - calendar
      summary: Update calendar
      description: Updating existing calendar owned by current user
      operationId: updateCalendar
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id that needs to be updated.'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'Updated calendar object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar'
        required: true
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your calendar.
        404:
          description: Calendar is not found.
      security:
      - bearerAuth: []  
    delete:
      tags:
      - calendar
      summary: Delete calendar
      description: Deleting existing calendar owned by current user
      operationId: deleteCalendar
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id that needs to be updated.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation. Calendar deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your calendar.
        404:
          description: Calendar is not found.
      security:
      - bearerAuth: []
  
  /calendars/{calendarId}/events:
    get:
      tags:
      - event
      summary: Get all events
      description: Getting of all existong events
      operationId: getEvents
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation. Return list of all events"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
      security:
      - bearerAuth: []
    post:
      tags:
      - event
      summary: Create new event
      description: Creating a new event
      operationId: createEvent
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id.'
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: "successful operation. Event is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'     
      security:
      - bearerAuth: []
  
  /calendars/{calendarId}/events/{eventId}:
    get:
      tags:
      - event
      summary: Get event by id
      description: Getting event by id
      operationId: getEventById
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id.'
        schema:
          type: integer
          format: int64
      - name: eventId
        in: path
        required: true
        description: 'The event id that needs to retrieved.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
        404:
          description: An event with provided ID was not found.
      security:
      - bearerAuth: []
    put:
      tags:
      - event
      summary: Update event
      description: Updating existing event ownde by current user
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id.'
        schema:
          type: integer
          format: int64
      - name: eventId
        in: path
        required: true
        description: 'The event id that needs to be updated.'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'Updated event object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to update not your event.
        404:
          description: User is not found.
      security:
      - bearerAuth: []  
    delete:
      tags:
      - event
      summary: Delete event
      description: Deleting existing event owned by current user
      operationId: deleteEvent
      parameters:
      - name: calendarId
        in: path
        required: true
        description: 'The calendar id.'
        schema:
          type: integer
          format: int64
      - name: eventId
        in: path
        required: true
        description: 'The event id that needs to be updated.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation. Event deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your event.
        404:
          description: Event is not found.
      security:
      - bearerAuth: []  
  
  /user/events/{username}:
     get:
      tags:
      - user
      summary: Get events for user with provided username
      description: Getting events for user with provided username
      parameters:
      - name: username
        in: path
        required: true
        description: 'The username of user to retrieve events from.'
        schema:
          type: integer
          format: int64
      operationId: getEventByUsername
      responses:
        200:
          description: "successful operation. Return list of all events related to user with provided username"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'   
        404:
          description: User is not found.
      security:
      - bearerAuth: []

components:
  schemas:
    User:
      required:
      - username
      - password
      - name
      - surname
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
    Event:
      required:
      - title
      - date
      - owner
      - participants
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        date:
          type: string
        owner:
          type: string
        participants:
          type: array
          items:
            type: string
    Calendar:
      required:
      - title
      - owner
      - visibleTo
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        date:
          type: string
        visibleTo:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: "JWT token was not provided or it is invalid"
    InvalidCredentialsError:
      description: "Provided credentials are invalid"
